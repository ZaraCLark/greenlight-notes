{"title":"Pre-Course Day 1","message":"# The Lexi Phase\nThe *Lexi Phase* is the **first phase** a computer goes through in the Javascript **interpretive language**. The Lexi Phase identifies variables and hoists them to the **top of the scope**.\n\n**Example 1**\n*(Written code)*\n```\nvar song = \"All the stars\";\nconsole.log(song);\n```\n\n*(Interpreted)*\n```\nvar song;\nsong = \"All the stars\";\nconsole.log(song);\n```\n\n```\nConsole\n\"All the stars\"\n```\n\nFunctions are **declarations**, so they are hoisted to the top of the scope along with the variables\n\n**Example 2**\n*(Written code)*\n```\nvar bar = typeof foo;\n\nfunction foo(a) {\n\t\treturn a;\n}\n```\n\n*(Interpreted)*\n```\nfunction foo(a) {     \n\t\treturn a;\n}\nvar bar;\nbar = typeof foo;\n```\n\n```\nConsole\n\"function\"\n```\n# Function Declaration vs. Expression\nA function expression **gives a value**, while a function declaration declares the function, but doesn't give a value. You can usually tell if something is **not a expression** if it **doesn't use var**.\n\n**Example**\n*Expression*\n```\nvar foo = function(a) {\n\treturn a;\n}\n```\n\n*Declaration*\n```\nfunction log(message) {\n\tconsole.log(message);\n}\n```\n\n# Arrow Function\nArrow functions will always be a **function expression**.\n\n**Example**\n`var log = (message) => { console.log(message); }`","id":"6b951f42-0490-475e-8dd0-a3da4caab040","date":"2018-05-15T22:58:37.313Z","updated":"2018-05-16T23:31:37.919Z"}