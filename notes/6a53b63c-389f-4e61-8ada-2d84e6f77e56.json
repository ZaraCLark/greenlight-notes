{"title":"Pre-Course Day 2","message":"# Closure\nA *closure* is **an inner function** that has access to the outer function's variables - **scope chains**. Closure has **three scope chains**: \n1. Access to **its own scope**\n2. Access to the **outer function's variables**\n3. Access to **global variables**\nIt also has access to the outer function's parameters. The inner function **cannot call** the outer function's arguments, but it can call its parameters directly.\n\n**Example**\n```\nfunction showName (firstName, lastName) {\nvar nameIntro = \"Your name is \";\n    // this inner function has access to the outer function's variables, including the parameter\n\t\t\nfunction makeFullName ()       \n\treturn nameIntro + firstName + \" \" + lastName; \n}\n\treturn makeFullName ();\n}\nshowName (\"Michael\", \"Jackson\"); \n// Your name is Michael Jackson\n```\n--------------------------------------------------\n1. Closure has access to the outer function's variable even after the outer function returns\n2. Closure store references to the outer function's variables\n3. Closures Gone Awry --> closures can lead to bugs when the outer function's variable changes with a for loop (fixed by using **Immediately Invoked Function Expression)**\n```\n//This is what an IIFE looks like\n(function changeValue() {\n\t\tif(1 == 1) {\n\t\tvar value = 2; \n\t\t}\n\t\tvalue = 6;\n}) ()\n```\n\n**More on this lesson:**\n[http://javascriptissexy.com/understand-javascript-closures-with-ease/](http://)\n\n# Scopes\n* var is a function scope\n**Example**\n```\nfunction add(y) {\nvar x = 9;\nreturn x + y;\n}\n```\n* let and const are block scoped\n**Example**\n```\nvar initialValue = 4;\nfor(var i = 0;  i < 1;  i++) {\n\tlet value = initialValue + 5;\n}\n```","id":"6a53b63c-389f-4e61-8ada-2d84e6f77e56","date":"2018-05-16T15:48:02.520Z","updated":"2018-05-16T22:52:27.192Z"}