{"title":"Pre-Course Day 2","message":"# Closure\nA closure is **an inner function** that has access to the outer function's variables - **scope chains**. Closure has **three scope chains**: \n1. Access to **its own scope**\n2. Access to the **outer function's variables**\n3. Access to **global variables**\nIt also has access to the outer function's parameters. The inner function cannot call the outer function's arguments, but it can call its parameters directly.\n\n**Example**\nfunction showName (firstName, lastName) {\nvar nameIntro = \"Your name is \";\n    *// this inner function has access to the outer function's variables, including the parameter*\nfunction makeFullName ()       \n\treturn nameIntro + firstName + \" \" + lastName; \n}\n\n\treturn makeFullName ();Â¨\n}\n\nshowName (\"Michael\", \"Jackson\"); *// Your name is Michael Jackson*\n\n# Closure's Rules and Side Effects\n1. Closure has access to the outer function's variable even after the outer function returns\n2. Closure store references to the outer function's variables\n3. Closures Gone Awry --> closures can lead to bugs when the outer function's variable changes with a for loop (fixed by using **Immediately Invoked Function Expression**)","id":"6a53b63c-389f-4e61-8ada-2d84e6f77e56","date":"2018-05-16T15:48:02.520Z","updated":"2018-05-16T22:11:37.211Z"}