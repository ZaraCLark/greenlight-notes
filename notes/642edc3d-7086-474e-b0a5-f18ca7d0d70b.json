{"title":"Pre-Course Day 4","message":"# This\n*This* is used as a keyword that is a shortcut, a referent, it refers to an object or the subject being executed.\n\n**Example**\n```\nvar person = {\n\tfirstName: \"Zara\",\n\tlastName: \"Clark\",\n\tfullName: function() {\n\t\tconsole.log(this.firstName + \" \" + this.lastName);\n\t\t//Another way for writing this\n\t\tconsole.log(person.firstName + \" \" + person.lastName);\n\t}\n}\n```\nThe code becomes **ambiguous** if we use the other method. If there was a person global variable then the code would attempt ot access the person global variable instead of the one that was created above.*This* is used to refer to the object and contains the value of the object.\n*This* is **not** assigned a value until **object invokes the function** where *this* is defined. The value it is assigned is based **exclusively** on the object that invokes the *this Function*.\n```\nconst someObject = {\n\tfunction someFunction() {\n\t\treturn this;\n\t}\n};\n\nconst obj = {\n\tfunction someFunction() {\n\t\treturn this;\n\t}\n}\n\nobj.someFunction === someObject  // false\nsomeObject.someFunction === someObject  // true\n```\n\nThere are **five patterns** that apply to identifying the context which *this* is bound:\n1. Global Reference\n2. Free Function invocation (binds *this* to global object)\n3. Using **.call()**, **.bind()**, or **.apply()**(binds the first argument passed to either function)\n4. Method invocation (binds to whatever someObject refers to at call time)\n5. Construction Mode (binds to new object instantiated)\n\n**More on the lesson:**\n[http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/](http://)","id":"642edc3d-7086-474e-b0a5-f18ca7d0d70b","date":"2018-05-21T17:47:21.821Z","updated":"2018-05-21T22:32:31.765Z"}