{"title":"Pre-Course Day 5","message":"# Pure Functions\nA *pure function* is a function that **does not** alter the input or any value in the global scope. (console.log does leave a side effect)\n\n**Example**\n```\nconst add = function(a, b) {\n\treturn a + b;\n}\n```\n*This function does not change the variables a or b, but only returns a new value*\n# Higher Order Functions\n**Each()**\neach() calls a function for each element of the collection. It accepts both arrays and objects. each() **does not** have a **return value**, but rather simply runs the function over each item in the input collection.\n* Inputs: Collection, Callback\n* Outputs: undefined\n* Callback Inputs: Value, Key, Collection\n* Callback Outputs: undefined\n\n**Map()**\nmap() is a useful primitive iteration function that works a lot like **each()**, but in addition to running operations on all members, it also **maintains** an array of the results.\n* Inputs: Collection, Callback\n* Outputs: a new array of the same length\n* Callback Inputs: Value, Index, Collection\n* Callback Outputs: a result\n\n**Filter()**\nfilter() returns all the elements of an array that passes a **truth test**\n* Inputs: Collection, Callback\n* Outputs: a new array of filtered results\n* Callback Inputs: Value, Index, Collection\n* Callback Outputs: a boolean\n","id":"642edc3d-7086-474e-b0a5-f18ca7d0d70b","date":"2018-05-24T22:50:14.335Z","updated":"2018-05-24T22:51:16.236Z"}