{"title":"Pre-Course Day 2","message":"# Closure\nA *closure* is an **inner function** that has access to the **outer function's variables** -- scope chain. The closure has **three scope chains**:\n1. Access to its **own scope**\n2. Access to the **outer function's scope**\n3. Access to the **global scope**\nThe inner function not only has access to the outer function's variables, but also its parameters. The inner function cannot access the outer function's arguments\n\n**Example**\n```\nfunction showName(firstName, lastName) {\n\tvar nameIntro = \"Your name is \"\n//This inner function has access to the outer function's variables\n\tfunction makeFullName() {\nreturn nameIntro + firstName + \" \" + lastName;\n\t}\n\treturn makeFullName();\n}\nshowName(\"Micheal\", \"Jackson\"); \n//Your name is Micheal Jackson\n```\n---------------------------------\n1. Closure has access to the outer function's variables even after the outer function returns\n2. Closure store references to the outer function's variables\n3. Closures Gone Awry - closures can lead to bugs when the outer function's variable change with a for loop. (can be fixed by creating a **Immediately Invoked Function Expression**)\n```\n//This is what an IIFE looks like\nvar value = 10;\n(function change() {\n\tif(1 === 1) {\n\t\tvalue = 2;\n\t}\n\tvalue = 6\n});\n```","id":"800d9e29-a195-4bef-ae9f-5d3b960454f8","date":"2018-05-17T23:33:45.731Z"}